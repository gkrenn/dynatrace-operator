name: Release
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+ # include prerelease tags too

jobs:
  prepare:
    permissions:
      contents: read
      id-token: write
    name: Prepare properties
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - name: Prepare build parameters
        id: prep
        run: |
          hack/build/ci/prepare-build-variables.sh
      - name: Docker metadata
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        id: meta
        with:
          images: dynatrace/dynatrace-operator
          tags: ${{ steps.prep.outputs.docker_image_tag }}
          labels: |
            ${{ steps.prep.outputs.docker_image_labels }}
            vcs-ref=${{ github.sha }}
    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      version: ${{ steps.prep.outputs.docker_image_tag }}

  pre-release:
    name: Create pre-release
    needs: [prepare]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - name: Setup Golang
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: "${{ github.workspace }}/go.mod"
      - name: Download dependencies
        id: depdownload
        run: |
          hack/build/ci/install-cgo-dependencies.sh
      - name: Generate release notes
        shell: bash
        env: 
          PRE_RELEASE: ${{ contains(github.ref, '-rc.') }}
        run: |
          hack/build/ci/generate-release-notes.sh
      - name: Create manifests 
        env: 
          version: ${{ needs.prepare.outputs.version }}
          platforms: | 
            kubernetes
            openshift
          images: |
            docker.io/dynatrace/dynatrace-operator
            registry.connect.redhat.com/dynatrace/dynatrace-operator
        run: |
          hack/build/ci/create-release-manifests.sh "$platforms" "$images" "$version"
      - name: Rename manifests
        if: ${{ contains(github.ref, '-rc.') }}
        run: |
          mv config/deploy/kubernetes/kubernetes-all.yaml config/deploy/kubernetes/kubernetes.yaml
          mv config/deploy/openshift/openshift-all.yaml config/deploy/openshift/openshift.yaml
      - name: Build helm packages
        uses: ./.github/actions/build-helm
        with:
          version: ${{ needs.prepare.outputs.version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          secring: ${{ secrets.SECRING }}
          passphrase: ${{ secrets.PASSPHRASE }}
          output-dir: "./helm-pkg"
      - name: Pre-release simple
        uses: softprops/action-gh-release@v1
        if: ${{ contains(github.ref, '-rc.') }}
        with:
          body_path: ./CHANGELOG.md
          files: |
            config/deploy/kubernetes/kubernetes.yaml
            config/deploy/openshift/openshift.yaml
            helm-pkg/dynatrace-operator-${{ needs.prepare.outputs.version }}.tgz
            helm-pkg/dynatrace-operator-${{ needs.prepare.outputs.version }}.tgz.prov
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          draft: true
          fail_on_unmatched_files: true
      - name: Pre-release all files
        uses: softprops/action-gh-release@v1
        if: ${{ !contains(github.ref, '-rc.') }}
        with:
          body_path: ./CHANGELOG.md
          files: |
            config/deploy/kubernetes/kubernetes.yaml
            config/deploy/kubernetes/kubernetes-csi.yaml
            config/deploy/kubernetes/gke-autopilot.yaml
            config/deploy/openshift/openshift.yaml
            config/deploy/openshift/openshift-csi.yaml
            helm-pkg/dynatrace-operator-${{ needs.prepare.outputs.version }}.tgz
            helm-pkg/dynatrace-operator-${{ needs.prepare.outputs.version }}.tgz.prov
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: true
          fail_on_unmatched_files: true